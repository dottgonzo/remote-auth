"use strict";
var jwt = require("jsonwebtoken");
var Promise = require("bluebird");
var superagent = require("superagent");
var default_1 = (function () {
    function default_1(o) {
        if (!o || !o.secret)
            throw Error("no secret provided");
        if (o.couchdb)
            this.couchdb = o.couchdb;
        if (o.app_id)
            this.app_id = o.app_id;
        this.secret = o.secret;
    }
    default_1.prototype.decode = function (token) {
        var decoded;
        try {
            decoded = jwt.verify(token, this.secret);
        }
        catch (err) {
            decoded = false;
        }
        return decoded;
    };
    default_1.prototype.couchdbauthorize = function (o) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (o) {
                if (o.user && o.password) {
                    if (_this.couchdb && _this.app_id) {
                        var couchdb = void 0;
                        couchdb = _this.couchdb;
                        superagent.post(_this.couchdb + "/getmachines").send({
                            username: o.user,
                            passw: o.password,
                            app_id: _this.app_id
                        }).end(function (err, res) {
                            if (err) {
                                reject(err);
                            }
                            else if (res && res.body && res.body.data && res.body.data.appdb) {
                                var obj = res.body;
                                obj.data.appdb.user = o.user;
                                obj.token = jwt.sign(obj.data.appdb, _this.secret);
                                resolve(obj);
                            }
                        });
                    }
                    else {
                        reject("no couchdbserver provided");
                    }
                }
                else {
                    reject("provide credentials!");
                }
            }
            else {
                reject("wrong params");
            }
        });
    };
    default_1.prototype.authorize = function (o) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!o) {
                reject("no vars provided");
            }
            else if (!o.provider) {
                reject("no provider");
            }
            else {
                switch (o.provider) {
                    case "couchdb":
                        _this.couchdbauthorize(o).then(function (a) {
                            resolve(a);
                        }).catch(function (err) {
                            reject(err);
                        });
                        break;
                    default:
                        reject("wrong provider");
                        break;
                }
            }
        });
    };
    return default_1;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;

//# sourceMappingURL=data:application/json;base64,
